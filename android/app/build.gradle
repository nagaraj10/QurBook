def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"


android {
    signingConfigs {
        release {
            storeFile file('./devkey.jks')
            storePassword 'devkey'
            keyAlias 'devkey'
            keyPassword 'devkey'
        }
    }
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
        abortOnError false
    }

    defaultConfig {
        applicationId "com.ventechsolutions.myFHB"
        minSdkVersion 28
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a", "x86", "x86_64", "armeabi", "mips"
        }
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }


    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    aaptOptions{
        noCompress 'tflite'
        noCompress 'lite'
    }

    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable false

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "x86_64", "armeabi", "armeabi-v7a", "arm64-v8a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk true
        }
    }
    sourceSets{
        main{
            jniLibs.srcDirs = ['libs']
        }
    }

    // Enable View Binding for the project's build features
    buildFeatures {
        viewBinding = true
    }

//    allprojects {
//        repositories {
//            flatDir {
//                dirs 'libs'
//            }
//        }
//    }


}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'cz.msebera.android:httpclient:4.4.1.1'
    implementation 'com.loopj.android:android-async-http:1.4.9'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation "com.google.android.gms:play-services-auth-api-phone:18.0.1"
    // For Kotlin
    implementation 'androidx.work:work-runtime-ktx:2.7.1'
    implementation 'com.google.android.gms:play-services-auth:20.3.0'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'com.google.firebase:firebase-analytics:19.0.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.firebase:firebase-messaging:23.1.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.8'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.8'
    implementation 'com.mikhaellopez:circularimageview:4.2.0'
    implementation "com.squareup.okhttp3:okhttp:4.8.0"
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.google.firebase:firebase-firestore-ktx:23.0.1'
    implementation 'com.github.ybq:Android-SpinKit:1.4.0'
    implementation 'com.appsflyer:af-android-sdk:6.2.0'
    implementation 'com.android.installreferrer:installreferrer:2.2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.12.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.0'
    implementation project(':ohq-reference-code')
    implementation project(':utility')
    implementation 'com.facebook.android:facebook-android-sdk:13.2.0'
    implementation files('libs/BleDeviceManager.jar')
    implementation files('libs/GSH601_Device.jar')
    implementation files('libs/DB62M_Device.jar')
    implementation files('libs/LS202_Device.jar')
    implementation files('libs/lifesense-device-ble-2.3.0-beta12.jar')

//    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])


}
apply plugin: 'com.google.gms.google-services'
repositories {
    maven {
        url 'http://maven.fabric.io/public'
        allowInsecureProtocol = true
    }
    maven {
        url 'https://www.jitpack.io'
        allowInsecureProtocol = true
    }
    mavenCentral()

}
