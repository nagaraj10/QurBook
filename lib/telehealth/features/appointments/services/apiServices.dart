import 'package:http/http.dart' as http;
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:myfhb/telehealth/features/appointments/model/appointmentsModel.dart';
import 'package:myfhb/telehealth/features/appointments/model/cancelModel.dart';
import 'dart:convert';
import 'dart:io';

class ApiFetch {
  Future<CancelResponse> cancel() async {
    Map id = {
      "updationType": "cancellation",
      "updatedInfo": {
        "bookingIds": ["Book6614"]
      }
    };
    var body = json.encode(id);
    return await http
        .post('https://dev.healthbook.vsolgmi.com/hb/api/v2/appointments/',
            headers: {"Content-Type": "application/json"}, body: body)
        .then((http.Response response) {
      print(response.body);
      if (response.statusCode == 200) {
        var resReturnCode = CancelResponse.fromJson(jsonDecode(response.body));
        if (resReturnCode.status == 200) {
//          print(resReturnCode.data[1].userId);
          print(response.body);
          return CancelResponse.fromJson(jsonDecode(response.body));
        } else {
          throw Exception('Failed to fetch');
        }
      } else {
        throw Exception('Failed to fetch');
      }
    });
  }

  Future<AppointmentsModel> fetchAppointments() async {
    return await http.get(
      'https://dev.healthbook.vsolgmi.com/hb/api/v2/appointments/getPatientDetails?patientId=ac9d114d-8e01-4c09-8d74-88b990ded4c3',
      headers: {
        HttpHeaders.authorizationHeader:
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6eyJQcm92aWRlclBheWxvYWQiOnsiaWRfdG9rZW4iOiJleUpyYVdRaU9pSktVSFpHWVZrd2NtTkRZemsxYVUxdGJWUkJZMGRUZDFoV2FVTlhkVlpHTWxCQk5WTTJXWEZYZDFsclBTSXNJbUZzWnlJNklsSlRNalUySW4wLmV5SmhkRjlvWVhOb0lqb2lOV1ZKTUZWNWJXMVlkMmMzVXpCM2JVcGhVMFJaUVNJc0luTjFZaUk2SWpNME9EQXpOelZpTFRJMk5EY3ROR00zTWkwNVlqSmpMVEU1T1RBMU16VmxOalptWkNJc0ltVnRZV2xzWDNabGNtbG1hV1ZrSWpwMGNuVmxMQ0ppYVhKMGFHUmhkR1VpT2lJeE1Wd3ZNVEpjTHpFNU9UTWlMQ0pwYzNNaU9pSm9kSFJ3Y3pwY0wxd3ZZMjluYm1sMGJ5MXBaSEF1ZFhNdFpXRnpkQzB5TG1GdFlYcHZibUYzY3k1amIyMWNMM1Z6TFdWaGMzUXRNbDltZDNWV2IyZFhkMmdpTENKd2FHOXVaVjl1ZFcxaVpYSmZkbVZ5YVdacFpXUWlPbVpoYkhObExDSmpiMmR1YVhSdk9uVnpaWEp1WVcxbElqb2lNelE0TURNM05XSXRNalkwTnkwMFl6Y3lMVGxpTW1NdE1UazVNRFV6TldVMk5tWmtJaXdpWjJsMlpXNWZibUZ0WlNJNklsTmxhbklpTENKaGRXUWlPaUkyYkd4alpuTnBiMlU0TWpKMGJtZHViblprYm1SMGRqZDBhU0lzSW1WMlpXNTBYMmxrSWpvaU1qTXlObUV3TWpFdE9XSm1OQzAwTnpNM0xXSXpOR1V0TVdJeU5UUXlZbU0xWldOa0lpd2lkRzlyWlc1ZmRYTmxJam9pYVdRaUxDSmhkWFJvWDNScGJXVWlPakUxT1RZeE9UZ3hOallzSW5Cb2IyNWxYMjUxYldKbGNpSTZJaXM1TVRnMk16azRNek14TXpZaUxDSmxlSEFpT2pFMU9UWXlNREUzTmpZc0ltbGhkQ0k2TVRVNU5qRTVPREUyTml3aVptRnRhV3g1WDI1aGJXVWlPaUpMZVNJc0ltVnRZV2xzSWpvaWJYVnlkR2g1YzJWcWNrQm5iV0ZwYkM1amIyMGlmUS5OSmI3MHhJYl8yVEplSlNmTFhLNTY3UzJQSk4tRXh4NVBkRTZSN3QzWEowQ1NhOFQxQXhLdkkyVzBuSk9nQXNMdTl2U1NJVEtGOG1iNE5PcUJRQ3FDaDBWNjlkSlZHd2QwZG1MeG82VDctbXdNZHA3TmZ6T1g2SlBua3A5TGlYYkZGRFNXMmMtRV92b1I0c0VmZ09YVEFCNWFmQlBqcV9IbGxiY0NlVWlNdGVRN0t6WjA4TlgybzRsNngzaGZ4U3h1S1h3aGNUTGRVcWwwaWhBMnQ1dlhYM2Ewbk1xaEJqSVI2a0hQcDNGVUtrT0dmVkdLeE5VeURiZ3JiY3ZZMHNwemtWMFNCWDN6cGZrSmgtdHJ5UWRaMmtlUXI0NzlucWhPWVVPTXVWRXVaOUllZE1yYzFDNlNYUTBYQ0NHdWFzZXM2dHZ3WnFYQ09tMkRKYmtRRW80UVEiLCJhY2Nlc3NfdG9rZW4iOiJleUpyYVdRaU9pSndNa0pyVDNKdmRWUXhWRmgyUkhkTVNFeFNaRUZ2TUZBMVNtbExjbkJxWkRoSVRVaFlkME5jTDNOTlJUMGlMQ0poYkdjaU9pSlNVekkxTmlKOS5leUp6ZFdJaU9pSXpORGd3TXpjMVlpMHlOalEzTFRSak56SXRPV0l5WXkweE9Ua3dOVE0xWlRZMlptUWlMQ0psZG1WdWRGOXBaQ0k2SWpJek1qWmhNREl4TFRsaVpqUXRORGN6TnkxaU16UmxMVEZpTWpVME1tSmpOV1ZqWkNJc0luUnZhMlZ1WDNWelpTSTZJbUZqWTJWemN5SXNJbk5qYjNCbElqb2lZWGR6TG1OdloyNXBkRzh1YzJsbmJtbHVMblZ6WlhJdVlXUnRhVzRnY0dodmJtVWdiM0JsYm1sa0lIQnliMlpwYkdVZ1pXMWhhV3dpTENKaGRYUm9YM1JwYldVaU9qRTFPVFl4T1RneE5qWXNJbWx6Y3lJNkltaDBkSEJ6T2x3dlhDOWpiMmR1YVhSdkxXbGtjQzUxY3kxbFlYTjBMVEl1WVcxaGVtOXVZWGR6TG1OdmJWd3ZkWE10WldGemRDMHlYMlozZFZadloxZDNhQ0lzSW1WNGNDSTZNVFU1TmpJd01UYzJOaXdpYVdGMElqb3hOVGsyTVRrNE1UWTJMQ0oyWlhKemFXOXVJam95TENKcWRHa2lPaUptTWpBelpUaGhOUzA0TVRNM0xUUXlNelV0T0dOak1DMWlaamM1TldSbVl6VTBPVEVpTENKamJHbGxiblJmYVdRaU9pSTJiR3hqWm5OcGIyVTRNakowYm1kdWJuWmtibVIwZGpkMGFTSXNJblZ6WlhKdVlXMWxJam9pTXpRNE1ETTNOV0l0TWpZME55MDBZemN5TFRsaU1tTXRNVGs1TURVek5XVTJObVprSW4wLldUWUtxRkc3TTltTjVCNUl1SmR6NFpLVGJucDF1ZnBwelEwajBneFliZnFiRks3NWRja25mMzllWE1RcnVBY0ozQjAxWWlocU5UTXAwLWJIVmZuQl9qeFJqdmdYaDNFX29IN0JtTWwyajV3RmYtOU5iRWhoTXZfLXY4RXZqZ2IyOUtuWmh6NU1FQm4tRlZ2ajRxMTlwU25vY1NfUE54aUFsYXA2Q0FxZXRCWUp2U183TE9XLVZ2V1FBSDJsU0lvc3hsMzdJTUpUN3VEWjZxNC02M2ZHR3BzMGQ1emYzU0NRaFpoOUg3UkxyX0lhV3FJanZRTmFtOHFiMlMwX0x5a0hGb2RfMkdBaVNqVGU1MW9JUnNLNVZ3MzU4ZmhnUkd0XzE5OVROSm1JakF1U3lPNllzVzNiemRqaVoxcTlqQ181d29DMkFtZWFXQm1Ebl93RFcyYkk2dyIsInJlZnJlc2hfdG9rZW4iOiJleUpqZEhraU9pSktWMVFpTENKbGJtTWlPaUpCTWpVMlIwTk5JaXdpWVd4bklqb2lVbE5CTFU5QlJWQWlmUS5hUlJVTEtGM2M2S3RnT0RuNTY2ZkZReWxiMGZySWpLWC1JUXJWS1JCWTVEeVktS29aMmIxQ0NyTThCMjB1NU9sWDRfNmRWZG1ydFFKRkExeGtfblNvb01KTF9Wc2JGZWU0bHl6bHpqejk5TFlFMmJIb0cxcDgzVEZnWXUwS0NLMzdwUDFyMlJ1SkY1M0NvWE9XLUdJY0txWGJoQUhna0xBZ2VXTTk1c0VzZmpWOERtMEludjdVRDFLbnZhdkdUTmd5VEtmZEFSS3MzVEg4NjZmakNpWnJaRUFoV0R1Zkw0VnBRRmZpSWVaY2VsZ0lFS3FHdERpUlNPemhVajBzVjB3cy1HVmYxY25SVVBpUGVRTWRteTFUdHJlVlFmX2RaRmQwc0tLUlV1S05ob2NrQk5iaGotMDZmNjcwRV9QVlYzRUlZSUpoU1NjTTVDdTE3UHdYZzVwQVEuT3RVQlZ4M0pjM1RFZkJEQS4yZWliVDlOdUpQYVJIMDZ5YUNuaEUyVkE1UTNON21YYmExVm1wUTgwSHpWMWtOY1RrZXBWcC1taGVqZ0pJamZoSElwSzdLVVgxVXhRNEM4cE9nMHVDM3JXdnJHeG5PMFRQTzJjNUZJNkdGcy1jSDdyYWpoRWhBSkE0NFpJZTBjeUVMa0RoSThuUWtPWVJOYlgyd3hBWGlqNnpoNmFUTVZRbHZOdm1FR293Z0dkLVhVVlgzczFxZXIyM1FmMlJPVnZ6Q09IV0FsY3RYbkFmWkMzRU9FeWtsTFFzT1RzQ0hUejAtbERCSnh4MVJDR0RiZUlQRXBaNjhBLVUtSWhlZVMtUWJ1TUVWZU5XMUs3UTgyTFJwVGo0MzcwaG9JdkhESEJkSzlOLXQ2d1JGSTdWU2ozSmtsS3FSZkgtMzNza0M0eFdqUkF4dHp2ekQ3ZEFrS3lfTnR6NVBsWUZ6TlJ4ZFNkMEpWOGVxN2pBVTBEM3ZxLU1IejJJT3dtMmlqUHkwVTZEMnZBdXFZR3pzbkZJMFVZbW5kajA0TThITUJKaFRBR1R4S0FqZmRCSGJmTDdIUElDU2ViU2k3ek5lQWlaX05NNUxDYmxyM3g5UHh2MXBVRFh1Sm9IckFLVzhRa2ZQcjZPUVQ0dVJrUGppRDJ0UGRWN3ZoQ2Z0Tjh0TTRCLUUwNGZVbktLM2lOM2gtak1ZbWdFU1RUZjZ3c2wtUTRJSWhSTmcyWmI1Q1BkdE82SDFTOWUySTR5TTNCa3hOR3BfMWFieF8tNUJnckFpbGdacjVRLWczdWZtdjZFLTNpMXZyM3ZMZ2dDdnNxQWlxVEJtVWRMZUw2ZTdSVXFEOTl6cHBWWFFndkZxQlRIcm8wQWhZR3lmNHhGV2hsNmUzU3B0d09MX1kySUh4bWxyWTMtWTBvaFlfdFk3WG1QMld1ZFJ5NzRBRXByZ2FnZlVxc1VDZzZSMXdLOHpfdjVldTVLN0xfNzdrd2hTdC1haDRoWFNkT3pwRXlqQ1VIVWJ3WWRiendXdGZCbDhVdXFEZG9QRlViSmppLUxxcjJtTXgtbEZNclZ4aUxudEM4VHJ1VWkybDRQOU5IWVFQbVdwa1hTM0dwdFB1QzRFNk5KNnR0a2hISTJicE5hRk5OS1ctWmljNF9MWmgwTS1NSmdyZ3h5VHRjRkxMVU01d2JPUEJ0TmVlX3IxNk1rSmlvQlpTWjJYN1NVT01ZczRPRHU3MmIwdkZJMmRnYmI2cUlCam1Da09aQzYwTjk3eDNUNFZ5OE5TMUV1YUQzQjRHYVdGRlRxZG1XaGUyTHN6cDJlRkt2RDdWeE1OUVVyS3hyT2ZJRWRZRHZDbXJCNHlyVm10X1E2MXI4N2JpWGkyZDF3T05kdWdLOXJiYlBCRlVDMUZ2OHl0OTNFelJCN3dZSGlnUnRYcWRydXJjaWZFNlpxcThXczhMZjkwWEFiMDlZa3gtallsMUVFbVdoYkJaa1NGVlprdzRYdkFUTTB3RkNKYWxqU3dENzFlamVKb0pGQ3l2eFlONXpVcEQwdWpwelBOM19zeWhQS2wxaURad2NhT0ZiM3lETzhlRzhFREw4c2steDc2UWtGeEwtNno3Y0h6UDc1SzQ0MTVfQ1FwaDRzcUdDNXYzSWZYejdLM3NxaE5fMFpFekRZVE5QV0tSdm1FcTBMZ2oxQjh0RjR5Qm0zWGxrMk5WM2NrVUJOcHRfTEdSdDNTQ29MSmh4Z1ZaU0JxS1pmMHBqVno5Mmc4RGk5a0YzVWo1dzI5M2ZfMXFaaG1KazQ0b1lVakVXTEl0Mmc0V053WWwwLXRabGt2SDhnVFJUU3hlUTFrcy1zdFRYSkZudVZQVjdnV3hjRkJUX1EwUlJjQmFCSTRrLko0ampRUTFnQnZWUVlxWGJwSUZ6X2ciLCJleHBpcmVzX2luIjozNjAwLCJ0b2tlbl90eXBlIjoiQmVhcmVyIn0sImNvdW50cnlDb2RlIjoiKzkxIiwiZXhwaXJ5RGF0ZSI6MzE5NTEwNjIyODA5Mywicm9sZUlkIjoiOGY0NWY0NDItNjg1YS00YjhiLTg2ZTctYjkzZTY5ZDgwOTZkIiwic2Vzc2lvbkRhdGUiOjE1OTYxOTgxNjcwNjQsInNlc3Npb25Sb2xlcyI6IjhmNDVmNDQyLTY4NWEtNGI4Yi04NmU3LWI5M2U2OWQ4MDk2ZCIsInNvdXJjZUluZm8iOnsic3ViU291cmNlSWQiOiIyNGUxNWJlMy05Njk1LTQ0ZjctODIyOS0zNGZmNGVmODEzOTYiLCJlbnRpdHlJZCI6IjkyYmRjN2IxLWQ1MDAtNDkwMS1iZmU4LThlMTlhMDlmZmFkNCIsInJvbGVJZCI6IjhmNDVmNDQyLTY4NWEtNGI4Yi04NmU3LWI5M2U2OWQ4MDk2ZCIsImlzRGV2aWNlIjpmYWxzZSwiZGV2aWNlSWQiOm51bGx9LCJzdWJqZWN0IjoibXVydGh5c2VqckBnbWFpbC5jb20iLCJ1c2VySWQiOiI0OWNkYzRiZS1hZmQ5LTQxOWUtYjNmOS0xYmQzNTIwN2M3NGYiLCJwaG9uZU51bWJlciI6Ijg2Mzk4MzMxMzYifSwiaWF0IjoxNTk2MTk4MTY3fQ.wpm85YEHZvkoWYA7HIlKjBvOsco1t80DjA0aVomQrI4"
      },
    ).then((http.Response response) {
//      print(response.body);
      if (response.statusCode == 200) {
        var resReturnCode =
            AppointmentsModel.fromJson(jsonDecode(response.body));
        if (resReturnCode.status == 200) {
//          print(resReturnCode.data[1].userId);
//          print(response.body);
          return AppointmentsModel.fromJson(jsonDecode(response.body));
        } else {
          throw Exception('Failed to fetch');
        }
      } else {
        throw Exception('Failed to fetch');
      }
    });
  }
}
